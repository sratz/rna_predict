#compdef rna_predict

__rna_predict_setup_cst_option() {
  cst_option=(
    '--cst=[constraints selection (default: none)]:constraints file:_files -W "(constraints)" -g \*.cst'
  )
}

__rna_predict_setup_dca_options() {
  dca_options=(
    '--dca-file=[dca file to use as input (default: dca/dca.txt)]:dca file:_files'
    '--dca-count=[maximum number of dca predictions to use (default: 100)]: :_guard "[0-9]#" "limit"'
  )
}

__rna_predict_setup_model_options() {
  model_options=(
    '--mode=[model selection mode (tag, top, ntop, cluster) (default: tag)]:selection mode:(tag top ntop cluster)'
    '*: :_guard "(|S_)[0-9]#(|_[0-9]#)" "number or tag"'
  )
}


__rna_predict_setup_editmake_constraints_options() {
  editmake_constraints_options=(
    '--cst-out-file=[output cst file (default: inferred from dca input file)]:constraints file:_files -g \*.cst'
    '--cst-function=[rosetta function to use for the constraints (default: "FADE -100 26 20 -2 2")]:function: '
  )
}

_rna_predict-prepare() {
  _arguments -s -w \
    '--name=[simulation name (default: infer from dirname)]:name: ' \
    '--native=[native pdb file (default: None)]:pdb file:_files -g \*.pdb' \
    '--sequence=[sequence fasta file (default: sequence.fasta)]:fasta file:_files -g \*.fasta' \
    '--secstruct=[secondary structure file (default: secstruct.txt)]:secstruct file:_files'
}

_rna_predict-prepare-cst() {
  local cst_option
  __rna_predict_setup_cst_option
  _arguments -s -w \
    '--override-motifs-cst=[use motifs from a different constraints set (default: -)]::constraints file:_files -W "(constraints)" -g \*.cst' \
    $cst_option
}

_rna_predict-create-helices() {
}

_rna_predict-create-motifs() {
  local cst_option
  __rna_predict_setup_cst_option
  _arguments -s -w \
    '--cycles=[number of cycles for motif generation (default: 5000)]: :_guard "[0-9]#" "cycles"' \
    '--nstruct=[number of motif structures to create (default: 4000)]: :_guard "[0-9]#" "number of structures"' \
    '--seed=[random seed (default: -)]: :_guard "(-|)[0-9]#" "seed"' \
    '--use-native[use native information for motif generation and assembly]' \
    $cst_option
}

_rna_predict-assemble() {
  local cst_option
  __rna_predict_setup_cst_option
  _arguments -s -w \
    '--cycles=[number of cycles for assembly (default: 20000)]: :_guard "[0-9]#" "cycles"' \
    '--nstruct=[number of assembly structures to create (default: 50000)]: :_guard "[0-9]#" "number of structures"' \
    '--seed=[random seed (default: -)]: :_guard "(-|)[0-9]#" "seed"' \
    '--use-native[use native information for motif generation and assembly]' \
    $cst_option
}


_rna_predict-evaluate() {
  local cst_option
  __rna_predict_setup_cst_option
  _arguments -s -w \
    '--cluster-cutoff=[cluster cutoff in angstrÃ¶m (default: 4.1)]: : _guard "[0-9]#(.|)[0-9]#" "cutoff"' \
    '--cluster-limit=[maximum number of clusters to create (default: 10)]: :_guard "[0-9]#" "limit"' \
    '--full-eval[force full evaulation (scores and rmsd) instead of clustering only]' \
    $cst_option
}

_rna_predict-evaluate-custom() {
  local cst_option
  __rna_predict_setup_cst_option
  local dca_options
  __rna_predict_setup_dca_options
  _arguments -s -w \
    $dca_options \
    '--threshold=[threshold to be treated as contact (default: 7.5)]: :_guard "[0-9]#(.|)[0-9]#" "threshold"' \
    '--radius=[number of neighboring residues in each direction to take into account (default: 2)]: :_guard "[0-9]#" "radius"' \
    '--full-eval[force full evaulation (extraction and matrix generation) instead of scoring only]' \
    $cst_option
}

_rna_predict-make-constraints() {
  local editmake_constraints_options
  __rna_predict_setup_editmake_constraints_options
  local dca_options
  __rna_predict_setup_dca_options
  _arguments -s -w \
    $dca_options \
    '--filter=[run dca contacts though (a) filter(s). For syntax information refer to the documentation.]:filter:__rna_predict_filter' \
    '--mapping-mode=[mapping mode to use for constraints creation (default: allAtomWesthof)]:mapping mode:(allAtomWesthof pOnly)' \
    $editmake_constraints_options
}

_rna_predict-edit-constraints() {
  local cst_option
  __rna_predict_setup_cst_option
  local editmake_constraints_options
  __rna_predict_setup_editmake_constraints_options
  _arguments -s -w \
    $editmake_constraints_options \
    $cst_option
}

_rna_predict-compare() {
}

_rna_predict-status() {
}

_rna_predict-print-models() {
  local cst_option
  __rna_predict_setup_cst_option
  local model_options
  __rna_predict_setup_model_options
  _arguments -s -w \
    $model_options \
    $cst_option
}

_rna_predict-extract-models() {
  local cst_option
  __rna_predict_setup_cst_option
  local model_options
  __rna_predict_setup_model_options
  _arguments -s -w \
    $model_options \
    $cst_option
}

_rna_predict-tools-plot-contact-distances() {
  _message "no more arguments"
}

_rna_predict-tools-plot-contact-atoms() {
  _arguments -s -w \
    '--mean-cutoff=[limit for average distance (default: 6.0)]: : _guard "[0-9]#(.|)[0-9]#" "cutoff"' \
    '--std-cutoff=[limit for the standard deviation (default: 3.0)]: : _guard "[0-9]#(.|)[0-9]#" "cutoff"'
}

_rna_predict-tools-plot-constraint-quality() {
  local curcontext=$curcontext state line ret=1
  _arguments -C -s -w \
    '--dca-mode[visualize residue-residue DCA instead of atom-atom constraints]' \
    ':comparison pdb:_files -g "*.pdb"' \
    ':: :->source' && ret=0

  case "$state" in
    (source)
      if (( words[(I)--dca-mode] )); then
        _files && ret=0
      else
        _alternative \
          'cst:constraints:_files -W "(constraints)" -g \*.cst' \
          'filter:filter:__rna_predict_filter' && ret=0
      fi
      ;;
  esac
  return ret
}

_rna_predict-tools-plot-dca-contacts-in-pdb() {
  _arguments -s -w \
    ':dca file:_files' \
    '::pdb file:_files -g "*.pdb"'
}

_rna_predict-tools-plot-clusters() {
  _arguments -s -w \
    '--max-models=[limit to number of models if > 1, or relative percentage if <= 1 (default: 0.99)]: : _guard "[0-9]#(.|)[0-9]#" "limit"' \
    ':constraint:_files -W "(constraints)" -g \*.cst'
}

_rna_predict-tools-plot-pdb-comparison() {
  _arguments -s -w \
    ':reference pdb:_files -g "*.pdb"' \
    '::comparison pdb:_files -g "*.pdb"'
}


# config::key:(fasta_file name native_pdb_file params_file torsions_file):value:

_rna_predict_commands() {
  local -a commands
  commands=(
    'prepare:prepare stems and motifs'
    'prepare-cst:prepare constraints file for motif generation and assembly'
    'create-helices:create ideal a-helices'
    'create-motifs:create motifs'
    'assemble:assemble'
    'evaluate:evaluate data (clustering and rmsd calculation)'
    'make-constraints:create a constraints file from a dca prediction'
    'edit-constraints:replace rosetta function in a constraints file'
    'compare:print comparison of prediction to native structure'
    'config:modify config variable'
    'status:print status information'
    'print-models: print a selection of models'
    'extract-models: extract models as pdb files'
    'evaluate-custom: evaluate using custom scoring'
    'tools: various plot generation tools'
  )
  _describe -t commands command commands
}

_rna_predict_commands_tools() {
  local -a commands
  commands=(
    'plot-contact-distances:plot histogram for each nucleotide pair contact containing the distances of the atoms involved'
    'plot-contact-atoms:plot atoms involved in forming nucleotide contacts'
    'plot-constraint-quality:plot constraint quality'
    'plot-dca-contacts-in-pdb:visualize how well DCA contacts are fullfiled in PDB files'
    'plot-clusters:plot score over native rmsd'
    'plot-pdb-comparison:compare PDB files by plotting the distance of the residues'
  )
  _describe -t commands command commands
}

_rna_predict() {
  local curcontext=$curcontext state line
  integer ret=1

  _arguments -C -s -w \
    {-h,--help}'[show help]' \
    {-V,--version}'[show program version number and exit]' \
    {-q,--quiet}'[do not print config on start]' \
    {-n,--dry-run}'[do not execute and only print external commands]' \
    {-j,--threads}'[maximum number of parallel subprocesses (default: 1)]: :_guard "[0-9]#" "threads"' \
    '(-): :->command' \
    '(-)*:: :->option-or-argument' && ret=0

  case $state in
    (command)
      _rna_predict_commands && ret=0
      ;;
    (option-or-argument)
      curcontext=${curcontext%:*:*}:rna_predict-$words[1]:
      if (( $+functions[_rna_predict-$words[1]] )); then
        _call_function ret _rna_predict-$words[1]
      elif zstyle -T :completion:$curcontext: use-fallback; then
        _files && ret=0
      else
        _message 'unknown sub-command'
      fi
      ;;
  esac
  return ret
}

_rna_predict-tools() {
  local curcontext=$curcontext state line
  local ret=1

  _arguments -C \
    '(-): :->command' \
    '(-)*:: :->option-or-argument' && ret=0

  case "$state" in
    (command)
      _rna_predict_commands_tools && ret=0
      ;;
    (option-or-argument)
      curcontext=${curcontext%:*:*}:rna_predict-tools-$words[1]:
      if (( $+functions[_rna_predict-tools-$words[1]] )); then
        _call_function ret _rna_predict-tools-$words[1]
      elif zstyle -T :completion:$curcontext: use-fallback; then
        _files && ret=0
      else
        _message 'unknown sub-command'
      fi
      ;;
  esac
  return ret
}


__rna_predict_filter() {
  local filters contexts suf ostate state
  contexts=()
  filters=(threshold none)
  suf=()
  state=(filter)

  while (( $#state )); do
  case "$state[1]" in
      (filter)
        compset -P '*,'
        if [[ ! -prefix *: ]]; then
          _wanted values expl 'filter' compadd -qS: -a filters
        else
          if compset -P threshold:; then
            contexts=(threshold cst model_kind model_number)
          elif compset -P none:; then
            contexts=()
          fi
        fi
        if (( $#contexts )); then
          for ostate in $contexts; do
	        compset -P '[^:]#:' || break
          done
	      suf=()
          compset -S ':*' || suf=( -qS: )
          [[ $ostate = $contexts[-1] ]] && suf=()
          state+=( "$ostate" )
        fi
        ;;
      (threshold)
        _guard '[0-9.]#' 'threshold'
        ;;
      (cst)
        _wanted values expl 'constraints' _files $suf -W '(constraints)' -g '*.cst'
        ;;
      (model_kind)
        _wanted values expl 'model kind' compadd $suf cluster tag top
        ;;
      (model_number)
        _guard '[0-9]#' 'model number'
        ;;
    esac
    shift state
   done
 }

 _rna_predict
