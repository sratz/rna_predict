#!/usr/bin/env python

# This script creates a "perfect" constraints file from a PDB file.
# Since using a full atom-atom contact map is way too large for
# rosetta, it is possible to filter the included atom pairs:
# - by threshold (include only those lower than a provided value)
# - randomly (choose a small number of contacts randomly)

from argparse import ArgumentParser
import random

import Bio.PDB

parser = ArgumentParser()
parser.add_argument("pdb", help="input pdb file")
parser.add_argument("cst", help="output cst file")
parser.add_argument("--mode", help="processing mode", choices=["random", "threshold", "full"], default="random")
parser.add_argument("--value", help="value for mode", default=None)
args = parser.parse_args()

pdb = Bio.PDB.PDBParser().get_structure("foo", args.pdb)
chain = pdb[0].child_list[0]
with open(args.cst, "w") as f:
    for res1 in chain:
        for res2 in chain:
            if res2.id[1] - res1.id[1] < 3:
                continue
            for atom1 in res1:
                for atom2 in res2:
                    distance = atom2 - atom1

                    if args.mode == "threshold":
                        # select contacts by distance
                        if distance > (float(args.value) if args.value else 8):
                            continue
                    elif args.mode == "random":
                        # select contacts randomly
                        if random.random() > (float(args.value) if args.value else 0.025):
                            continue
                    line = "%s %d %s %d FADE %.2f %.2f %.2f %d %d" % (atom1.id, res1.id[1], atom2.id, res2.id[1], distance - 3, distance + 3, 1, -8, 0)
                    print line
                    f.write(line + "\n")
